{
		"language": "Solidity",
		"sources": {
			"contracts/DexhuneRoot.sol": {
				"content": "// SPDX-License-Identifier: BSD-3-Clause\r\n/// @title Dexhune Owner and Management Logic\r\n/*\r\n*    ........................................................\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\r\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\r\n*    ........................................................\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\nimport \"./DexhuneBase.sol\";\r\n\r\ncontract DexhuneConfig {\r\n    //  30 seconds or 15 blocks, but in the testnet version we'll do 5 minutes\r\n    uint256 internal constant MAXIMUM_VOTES_PER_PROPOSAL = 1000;\r\n    uint256 internal constant BLOCKS_PER_SECOND = 2;\r\n    /// @dev Total proposal duration in seconds\r\n    uint256 internal constant PROPOSAL_DURATION = 300; // 15 blocks per 30 seconds\r\n    uint256 internal constant PROPOSAL_BLOCKS = BLOCKS_PER_SECOND * PROPOSAL_DURATION;\r\n\r\n    bool public transferCooldown = true;\r\n    uint public cooldownTimeout = BLOCKS_PER_SECOND * 60;\r\n}\r\n\r\nabstract contract DexhuneRoot is DexhuneConfig {\r\n    address public owner;\r\n    address[] nftCollections;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        nftCollections = new address[](0);\r\n    }\r\n    \r\n    function ensureOwnership() private view {\r\n        require(msg.sender == owner, \"This method can only be called by the owner of this smart contract\");\r\n    }\r\n\r\n    function transferOwnership(address _address) public {\r\n        ensureOwnership();\r\n\r\n        address oldAddress = owner;\r\n        owner = _address;\r\n        emit transferredOwnership(oldAddress, owner);\r\n    }\r\n\r\n    function addNFTCollection(address _contractAddress) public {\r\n        ensureOwnership();\r\n        require(_contractAddress != address(0), \"An NFT collection cannot have an empty address\");\r\n\r\n        uint index = nftCollections.length;\r\n        nftCollections.push(_contractAddress);\r\n        emit addedNFTCollection(index, _contractAddress);\r\n    }\r\n\r\n    \r\n    function removeNFTCollection(uint256 _index) public {\r\n        ensureOwnership();\r\n        \r\n        require(_index >= 0 && _index < nftCollections.length, \"The requested NFT collection does not exist\");\r\n\r\n        address addr = nftCollections[_index];\r\n        \r\n        // https://ethereum.stackexchange.com/a/59234\r\n        nftCollections[_index] = nftCollections[nftCollections.length - 1];\r\n        nftCollections.pop();\r\n        \r\n        emit removedNFTCollection(_index, addr);\r\n    }\r\n\r\n    function setTransferTimeout(bool _enabled) public {\r\n        ensureOwnership();\r\n        transferCooldown = _enabled;\r\n    }\r\n\r\n    function setCooldownTimeout(uint _timeout) public {\r\n        ensureOwnership();\r\n\r\n        cooldownTimeout = _timeout;\r\n    }\r\n\r\n\r\n    /// @notice Ownership of Dexhune has been transferred\r\n    /// @dev Transfers ownership of the contract to another address\r\n    /// @param from Address of the previous owner\r\n    /// @param to Address of the new owner\r\n    event transferredOwnership(address from, address to);\r\n\r\n    /// @notice An NFT collection has been added\r\n    /// @dev Adds an NFT collection\r\n    /// @param id Id of the collection\r\n    event addedNFTCollection(uint256 id, address collectionAddress);\r\n\r\n    /// @notice An NFT collection has been removed\r\n    /// @dev Removes an NFT collection\r\n    /// @param id Id of the collection\r\n    event removedNFTCollection(uint256 id, address collectionAddress);\r\n}"
			},
			"contracts/DexhuneBase.sol": {
				"content": "// SPDX-License-Identifier: BSD-3-Clause\r\n/// @title Dexhune Events and Interfaces\r\n/*\r\n*    ........................................................\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\r\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\r\n*    ........................................................\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ncontract DexhuneBase {    \r\n     struct PriceProposal {\r\n        uint256 id;\r\n        string description;\r\n        uint deadline;\r\n        uint256 votesUp;\r\n        uint256 votesDown;\r\n        uint256 value;\r\n        mapping(address => int8) votes;\r\n        bool finalized;\r\n    }\r\n\r\n    struct Account {\r\n        address addr;\r\n        uint256 balance;\r\n        address[] nfts;\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	}