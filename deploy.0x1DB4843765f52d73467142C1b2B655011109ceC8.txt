DEBUG logging is turned ON
Running truffle-plugin-verify v0.6.5
Retrieving network's network ID & chain ID
Failed to retrieve network information, using configurated network ID instead
Verifying contracts on snowtrace
   Verifying DexhunePriceDAO@0x1DB4843765f52d73467142C1b2B655011109ceC8
   Resolving artifact for contract DexhunePriceDAO
   Custom address 0x1DB4843765f52d73467142C1b2B655011109ceC8 specified
   Retrieving constructor parameters from https://api.snowtrace.io/api?apiKey=4N6J9BKZZAYWBYH4RF2UBWU1P3UX8CPSKG&module=account&action=txlist&address=0x1DB4843765f52d73467142C1b2B655011109ceC8&page=1&sort=asc&offset=1
   Could not retrieve constructor parameters, using empty parameters as fallback
   Sending verify request with POST arguments:
      {
        "apikey": "4N6J9BKZZAYWBYH4RF2UBWU1P3UX8CPSKG",
        "module": "contract",
        "action": "verifysourcecode",
        "contractaddress": "0x1DB4843765f52d73467142C1b2B655011109ceC8",
        "sourceCode": "{\"language\":\"Solidity\",\"sources\":{\"/contracts/DexhunePriceDAO.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n/// @title Dexhune DAO Logic\\r\\n/*\\r\\n*    ........................................................\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\\r\\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\\r\\n*    ........................................................\\r\\n*/\\r\\n\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\nimport \\\"./_StandardInterfaces.sol\\\";\\r\\nimport \\\"./DexhuneBase.sol\\\";\\r\\nimport \\\"./DexhuneRoot.sol\\\";\\r\\n\\r\\n\\r\\ncontract DexhunePriceDAO is DexhuneBase, DexhuneRoot {    \\r\\n    uint256 price;\\r\\n    uint256 proposalCount;\\r\\n    mapping(uint256 => PriceProposal) public PriceProposals;\\r\\n\\r\\n    function getPrice() public view returns(uint256) {\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function proposePrice(string memory _desc, uint256 _price) public {\\r\\n        PriceProposal storage p = PriceProposals[proposalCount];\\r\\n        p.id = proposalCount;\\r\\n        p.description = _desc;\\r\\n        p.value = _price;\\r\\n        p.deadline = block.number + PROPOSAL_BLOCKS;\\r\\n        \\r\\n\\r\\n        emit ProposalCreated(proposalCount, _desc, msg.sender);\\r\\n        proposalCount++;\\r\\n    }\\r\\n\\r\\n    function castPriceVote(uint256 _id, bool _vote) public {\\r\\n        require(ensureEligible(), \\\"You are not eligible to vote.\\\");\\r\\n\\r\\n        PriceProposal storage p = PriceProposals[_id];\\r\\n        require(p.deadline == 0, \\\"The requested proposal does not exist\\\");\\r\\n        require(\\r\\n            block.number >= p.deadline,\\r\\n            \\\"Voting has been deactivated for this proposal\\\"\\r\\n        );\\r\\n        require(p.votes[msg.sender] != 0, \\\"You are not allowed to vote more than once\\\");\\r\\n\\r\\n        if (_vote) {\\r\\n            p.votesUp++;\\r\\n            p.votes[msg.sender] = 1;\\r\\n        } else {\\r\\n            p.votesDown++;\\r\\n            p.votes[msg.sender] = -1;\\r\\n        }\\r\\n\\r\\n        emit VoteCast(msg.sender, _id, _vote);\\r\\n    }\\r\\n\\r\\n    function finalizePriceProposal(uint256 _id) public {\\r\\n        PriceProposal storage p = PriceProposals[_id];\\r\\n        require(p.deadline == 0, \\\"The requested proposal does not exist\\\");\\r\\n        require(\\r\\n            block.number < p.deadline,\\r\\n            \\\"The requested proposal is still active\\\"\\r\\n        );\\r\\n\\r\\n        if (p.finalized) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (p.votesUp > p.votesDown) {\\r\\n            uint256 old = price;\\r\\n            price = p.value;\\r\\n\\r\\n            emit ProposalFinalized(_id, true);\\r\\n            emit PriceUpdated(old, price);\\r\\n        } else {\\r\\n            emit ProposalFinalized(_id, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ensureEligible() private view returns(bool) {\\r\\n        for (uint i = 0; i < nftCollections.length; i++) {\\r\\n            address addr = nftCollections[i];\\r\\n            IERC721 collection = IERC721(addr);\\r\\n\\r\\n            if (collection.balanceOf(msg.sender) > 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return false;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /// @notice A new proposal was created\\r\\n    /// @dev Notifies that a new proposal was created\\r\\n    /// @param id Id of the proposal\\r\\n    /// @param description Description of the proposal\\r\\n    /// @param proposer Address of the proposer\\r\\n    event ProposalCreated(uint256 id, string description, address proposer);\\r\\n\\r\\n\\r\\n    /// @notice A vote has been cast on a proposal\\r\\n    /// @dev Notifies that a vote has been casted\\r\\n    /// @param voter Address of the voter\\r\\n    /// @param proposal Id of the proposal\\r\\n    /// @param votedFor Indicates whether the voter voted for or against\\r\\n    event VoteCast(address voter, uint256 proposal, bool votedFor);\\r\\n\\r\\n    /// @notice Voting result of the Proposal\\r\\n    /// @dev Notifies that a proposal has been finalized\\r\\n    /// @param id Id of the proposal\\r\\n    /// @param passed Result of the voting on proposal, passed defines that the proposal is accepted by the voters\\r\\n    event ProposalFinalized(uint256 id, bool passed);\\r\\n\\r\\n    /// @notice The price has been updated\\r\\n    event PriceUpdated(uint256 oldPrice, uint256 newPrice);\\r\\n}\\r\\n\\r\\n\"},\"/contracts/_StandardInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n/// @title ERC721 interface based on ERC standard\\r\\n// Sources:\\r\\n// https://ethereum.org/en/developers/docs/standards/tokens/erc-721/\\r\\n// https://eips.ethereum.org/EIPS/eip-721\\r\\n/*\\r\\n*    ........................................................\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\\r\\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\\r\\n*    ........................................................\\r\\n*/\\r\\n\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\ninterface IERC721 {\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n    // function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\\r\\n    // function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n    // function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n    // function approve(address _approved, uint256 _tokenId) external payable;\\r\\n    // function setApprovalForAll(address _operator, bool _approved) external;\\r\\n    // function getApproved(uint256 _tokenId) external view returns (address);\\r\\n    // function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\"},\"/contracts/DexhuneRoot.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n/// @title Dexhune Owner and Management Logic\\r\\n/*\\r\\n*    ........................................................\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\\r\\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\\r\\n*    ........................................................\\r\\n*/\\r\\n\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\nimport \\\"./DexhuneBase.sol\\\";\\r\\n\\r\\ncontract DexhuneConfig {\\r\\n    //  30 seconds or 15 blocks, but in the testnet version we'll do 5 minutes\\r\\n    uint256 internal constant MAXIMUM_VOTES_PER_PROPOSAL = 1000;\\r\\n    uint256 internal constant BLOCKS_PER_SECOND = 2;\\r\\n    /// @dev Total proposal duration in seconds\\r\\n    uint256 internal constant PROPOSAL_DURATION = 300; // 15 blocks per 30 seconds\\r\\n    uint256 internal constant PROPOSAL_BLOCKS = BLOCKS_PER_SECOND * PROPOSAL_DURATION;\\r\\n\\r\\n    bool public transferCooldown = true;\\r\\n    uint public cooldownTimeout = BLOCKS_PER_SECOND * 60;\\r\\n}\\r\\n\\r\\nabstract contract DexhuneRoot is DexhuneConfig {\\r\\n    address public owner;\\r\\n    address[] nftCollections;\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        nftCollections = new address[](0);\\r\\n    }\\r\\n    \\r\\n    function ensureOwnership() private view {\\r\\n        require(msg.sender == owner, \\\"This method can only be called by the owner of this smart contract\\\");\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _address) public {\\r\\n        ensureOwnership();\\r\\n\\r\\n        address oldAddress = owner;\\r\\n        owner = _address;\\r\\n        emit transferredOwnership(oldAddress, owner);\\r\\n    }\\r\\n\\r\\n    function addNFTCollection(address _contractAddress) public {\\r\\n        ensureOwnership();\\r\\n        require(_contractAddress != address(0), \\\"An NFT collection cannot have an empty address\\\");\\r\\n\\r\\n        uint index = nftCollections.length;\\r\\n        nftCollections.push(_contractAddress);\\r\\n        emit addedNFTCollection(index, _contractAddress);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function removeNFTCollection(uint256 _index) public {\\r\\n        ensureOwnership();\\r\\n        \\r\\n        require(_index >= 0 && _index < nftCollections.length, \\\"The requested NFT collection does not exist\\\");\\r\\n\\r\\n        address addr = nftCollections[_index];\\r\\n        \\r\\n        // https://ethereum.stackexchange.com/a/59234\\r\\n        nftCollections[_index] = nftCollections[nftCollections.length - 1];\\r\\n        nftCollections.pop();\\r\\n        \\r\\n        emit removedNFTCollection(_index, addr);\\r\\n    }\\r\\n\\r\\n    function setTransferTimeout(bool _enabled) public {\\r\\n        ensureOwnership();\\r\\n        transferCooldown = _enabled;\\r\\n    }\\r\\n\\r\\n    function setCooldownTimeout(uint _timeout) public {\\r\\n        ensureOwnership();\\r\\n\\r\\n        cooldownTimeout = _timeout;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Ownership of Dexhune has been transferred\\r\\n    /// @dev Transfers ownership of the contract to another address\\r\\n    /// @param from Address of the previous owner\\r\\n    /// @param to Address of the new owner\\r\\n    event transferredOwnership(address from, address to);\\r\\n\\r\\n    /// @notice An NFT collection has been added\\r\\n    /// @dev Adds an NFT collection\\r\\n    /// @param id Id of the collection\\r\\n    event addedNFTCollection(uint256 id, address collectionAddress);\\r\\n\\r\\n    /// @notice An NFT collection has been removed\\r\\n    /// @dev Removes an NFT collection\\r\\n    /// @param id Id of the collection\\r\\n    event removedNFTCollection(uint256 id, address collectionAddress);\\r\\n}\"},\"/contracts/DexhuneBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\n/// @title Dexhune Events and Interfaces\\r\\n/*\\r\\n*    ........................................................\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\\r\\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\\r\\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\\r\\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\\r\\n*    ........................................................\\r\\n*/\\r\\n\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\ncontract DexhuneBase {    \\r\\n     struct PriceProposal {\\r\\n        uint256 id;\\r\\n        string description;\\r\\n        uint deadline;\\r\\n        uint256 votesUp;\\r\\n        uint256 votesDown;\\r\\n        uint256 value;\\r\\n        mapping(address => int8) votes;\\r\\n        bool finalized;\\r\\n    }\\r\\n\\r\\n    struct Account {\\r\\n        address addr;\\r\\n        uint256 balance;\\r\\n        address[] nfts;\\r\\n    }\\r\\n}\"}},\"settings\":{\"remappings\":[],\"optimizer\":{\"enabled\":false,\"runs\":200},\"evmVersion\":\"shanghai\",\"libraries\":{}}}",
        "codeformat": "solidity-standard-json-input",
        "contractname": "/contracts/DexhunePriceDAO.sol:DexhunePriceDAO",
        "compilerversion": "v0.8.20+commit.a1b79de6",
        "constructorArguements": ""
      }
   Unable to locate ContractCode at 0x1DB4843765f52d73467142C1b2B655011109ceC8
   Failed to verify 1 contract(s): DexhunePriceDAO@0x1DB4843765f52d73467142C1b2B655011109ceC8
Verifying contracts on sourcify
   Fetching supported chains from https://sourcify.dev/server/chains
   Verifying DexhunePriceDAO@0x1DB4843765f52d73467142C1b2B655011109ceC8
   Resolving artifact for contract DexhunePriceDAO
   Custom address 0x1DB4843765f52d73467142C1b2B655011109ceC8 specified
   Sending verify request with POST arguments:
      {
        "address": "0x1DB4843765f52d73467142C1b2B655011109ceC8",
        "chain": "43114",
        "files": {
          "DexhunePriceDAO.sol": "// SPDX-License-Identifier: BSD-3-Clause\r\n/// @title Dexhune DAO Logic\r\n/*\r\n*    ........................................................\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\r\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\r\n*    ........................................................\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\nimport \"./_StandardInterfaces.sol\";\r\nimport \"./DexhuneBase.sol\";\r\nimport \"./DexhuneRoot.sol\";\r\n\r\n\r\ncontract DexhunePriceDAO is DexhuneBase, DexhuneRoot {    \r\n    uint256 price;\r\n    uint256 proposalCount;\r\n    mapping(uint256 => PriceProposal) public PriceProposals;\r\n\r\n    function getPrice() public view returns(uint256) {\r\n        return price;\r\n    }\r\n\r\n    function proposePrice(string memory _desc, uint256 _price) public {\r\n        PriceProposal storage p = PriceProposals[proposalCount];\r\n        p.id = proposalCount;\r\n        p.description = _desc;\r\n        p.value = _price;\r\n        p.deadline = block.number + PROPOSAL_BLOCKS;\r\n        \r\n\r\n        emit ProposalCreated(proposalCount, _desc, msg.sender);\r\n        proposalCount++;\r\n    }\r\n\r\n    function castPriceVote(uint256 _id, bool _vote) public {\r\n        require(ensureEligible(), \"You are not eligible to vote.\");\r\n\r\n        PriceProposal storage p = PriceProposals[_id];\r\n        require(p.deadline == 0, \"The requested proposal does not exist\");\r\n        require(\r\n            block.number >= p.deadline,\r\n            \"Voting has been deactivated for this proposal\"\r\n        );\r\n        require(p.votes[msg.sender] != 0, \"You are not allowed to vote more than once\");\r\n\r\n        if (_vote) {\r\n            p.votesUp++;\r\n            p.votes[msg.sender] = 1;\r\n        } else {\r\n            p.votesDown++;\r\n            p.votes[msg.sender] = -1;\r\n        }\r\n\r\n        emit VoteCast(msg.sender, _id, _vote);\r\n    }\r\n\r\n    function finalizePriceProposal(uint256 _id) public {\r\n        PriceProposal storage p = PriceProposals[_id];\r\n        require(p.deadline == 0, \"The requested proposal does not exist\");\r\n        require(\r\n            block.number < p.deadline,\r\n            \"The requested proposal is still active\"\r\n        );\r\n\r\n        if (p.finalized) {\r\n            return;\r\n        }\r\n\r\n        if (p.votesUp > p.votesDown) {\r\n            uint256 old = price;\r\n            price = p.value;\r\n\r\n            emit ProposalFinalized(_id, true);\r\n            emit PriceUpdated(old, price);\r\n        } else {\r\n            emit ProposalFinalized(_id, false);\r\n        }\r\n    }\r\n\r\n    function ensureEligible() private view returns(bool) {\r\n        for (uint i = 0; i < nftCollections.length; i++) {\r\n            address addr = nftCollections[i];\r\n            IERC721 collection = IERC721(addr);\r\n\r\n            if (collection.balanceOf(msg.sender) > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    /// @notice A new proposal was created\r\n    /// @dev Notifies that a new proposal was created\r\n    /// @param id Id of the proposal\r\n    /// @param description Description of the proposal\r\n    /// @param proposer Address of the proposer\r\n    event ProposalCreated(uint256 id, string description, address proposer);\r\n\r\n\r\n    /// @notice A vote has been cast on a proposal\r\n    /// @dev Notifies that a vote has been casted\r\n    /// @param voter Address of the voter\r\n    /// @param proposal Id of the proposal\r\n    /// @param votedFor Indicates whether the voter voted for or against\r\n    event VoteCast(address voter, uint256 proposal, bool votedFor);\r\n\r\n    /// @notice Voting result of the Proposal\r\n    /// @dev Notifies that a proposal has been finalized\r\n    /// @param id Id of the proposal\r\n    /// @param passed Result of the voting on proposal, passed defines that the proposal is accepted by the voters\r\n    event ProposalFinalized(uint256 id, bool passed);\r\n\r\n    /// @notice The price has been updated\r\n    event PriceUpdated(uint256 oldPrice, uint256 newPrice);\r\n}\r\n\r\n",
          "_StandardInterfaces.sol": "// SPDX-License-Identifier: BSD-3-Clause\r\n/// @title ERC721 interface based on ERC standard\r\n// Sources:\r\n// https://ethereum.org/en/developers/docs/standards/tokens/erc-721/\r\n// https://eips.ethereum.org/EIPS/eip-721\r\n/*\r\n*    ........................................................\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\r\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\r\n*    ........................................................\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    // function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n    // function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    // function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    // function approve(address _approved, uint256 _tokenId) external payable;\r\n    // function setApprovalForAll(address _operator, bool _approved) external;\r\n    // function getApproved(uint256 _tokenId) external view returns (address);\r\n    // function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}",
          "DexhuneRoot.sol": "// SPDX-License-Identifier: BSD-3-Clause\r\n/// @title Dexhune Owner and Management Logic\r\n/*\r\n*    ........................................................\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\r\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\r\n*    ........................................................\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\nimport \"./DexhuneBase.sol\";\r\n\r\ncontract DexhuneConfig {\r\n    //  30 seconds or 15 blocks, but in the testnet version we'll do 5 minutes\r\n    uint256 internal constant MAXIMUM_VOTES_PER_PROPOSAL = 1000;\r\n    uint256 internal constant BLOCKS_PER_SECOND = 2;\r\n    /// @dev Total proposal duration in seconds\r\n    uint256 internal constant PROPOSAL_DURATION = 300; // 15 blocks per 30 seconds\r\n    uint256 internal constant PROPOSAL_BLOCKS = BLOCKS_PER_SECOND * PROPOSAL_DURATION;\r\n\r\n    bool public transferCooldown = true;\r\n    uint public cooldownTimeout = BLOCKS_PER_SECOND * 60;\r\n}\r\n\r\nabstract contract DexhuneRoot is DexhuneConfig {\r\n    address public owner;\r\n    address[] nftCollections;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        nftCollections = new address[](0);\r\n    }\r\n    \r\n    function ensureOwnership() private view {\r\n        require(msg.sender == owner, \"This method can only be called by the owner of this smart contract\");\r\n    }\r\n\r\n    function transferOwnership(address _address) public {\r\n        ensureOwnership();\r\n\r\n        address oldAddress = owner;\r\n        owner = _address;\r\n        emit transferredOwnership(oldAddress, owner);\r\n    }\r\n\r\n    function addNFTCollection(address _contractAddress) public {\r\n        ensureOwnership();\r\n        require(_contractAddress != address(0), \"An NFT collection cannot have an empty address\");\r\n\r\n        uint index = nftCollections.length;\r\n        nftCollections.push(_contractAddress);\r\n        emit addedNFTCollection(index, _contractAddress);\r\n    }\r\n\r\n    \r\n    function removeNFTCollection(uint256 _index) public {\r\n        ensureOwnership();\r\n        \r\n        require(_index >= 0 && _index < nftCollections.length, \"The requested NFT collection does not exist\");\r\n\r\n        address addr = nftCollections[_index];\r\n        \r\n        // https://ethereum.stackexchange.com/a/59234\r\n        nftCollections[_index] = nftCollections[nftCollections.length - 1];\r\n        nftCollections.pop();\r\n        \r\n        emit removedNFTCollection(_index, addr);\r\n    }\r\n\r\n    function setTransferTimeout(bool _enabled) public {\r\n        ensureOwnership();\r\n        transferCooldown = _enabled;\r\n    }\r\n\r\n    function setCooldownTimeout(uint _timeout) public {\r\n        ensureOwnership();\r\n\r\n        cooldownTimeout = _timeout;\r\n    }\r\n\r\n\r\n    /// @notice Ownership of Dexhune has been transferred\r\n    /// @dev Transfers ownership of the contract to another address\r\n    /// @param from Address of the previous owner\r\n    /// @param to Address of the new owner\r\n    event transferredOwnership(address from, address to);\r\n\r\n    /// @notice An NFT collection has been added\r\n    /// @dev Adds an NFT collection\r\n    /// @param id Id of the collection\r\n    event addedNFTCollection(uint256 id, address collectionAddress);\r\n\r\n    /// @notice An NFT collection has been removed\r\n    /// @dev Removes an NFT collection\r\n    /// @param id Id of the collection\r\n    event removedNFTCollection(uint256 id, address collectionAddress);\r\n}",
          "DexhuneBase.sol": "// SPDX-License-Identifier: BSD-3-Clause\r\n/// @title Dexhune Events and Interfaces\r\n/*\r\n*    ........................................................\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%..%%..%%..%%..%%..%%%%%%.\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%%.%%..%%.....\r\n*    .%%..%%..%%%%......%%....%%%%%%..%%..%%..%%.%%%..%%%%...\r\n*    .%%..%%..%%.......%%%%...%%..%%..%%..%%..%%..%%..%%.....\r\n*    .%%%%%...%%%%%%..%%..%%..%%..%%...%%%%...%%..%%..%%%%%%.\r\n*    ........................................................\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ncontract DexhuneBase {    \r\n     struct PriceProposal {\r\n        uint256 id;\r\n        string description;\r\n        uint deadline;\r\n        uint256 votesUp;\r\n        uint256 votesDown;\r\n        uint256 value;\r\n        mapping(address => int8) votes;\r\n        bool finalized;\r\n    }\r\n\r\n    struct Account {\r\n        address addr;\r\n        uint256 balance;\r\n        address[] nfts;\r\n    }\r\n}",
          "metadata.json": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"}],\"name\":\"ProposalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"votedFor\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"addedNFTCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"removedNFTCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferredOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PriceProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesDown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"castPriceVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizePriceProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"proposePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setCooldownTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTransferTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ProposalCreated(uint256,string,address)\":{\"details\":\"Notifies that a new proposal was created\",\"params\":{\"description\":\"Description of the proposal\",\"id\":\"Id of the proposal\",\"proposer\":\"Address of the proposer\"}},\"ProposalFinalized(uint256,bool)\":{\"details\":\"Notifies that a proposal has been finalized\",\"params\":{\"id\":\"Id of the proposal\",\"passed\":\"Result of the voting on proposal, passed defines that the proposal is accepted by the voters\"}},\"VoteCast(address,uint256,bool)\":{\"details\":\"Notifies that a vote has been casted\",\"params\":{\"proposal\":\"Id of the proposal\",\"votedFor\":\"Indicates whether the voter voted for or against\",\"voter\":\"Address of the voter\"}},\"addedNFTCollection(uint256,address)\":{\"details\":\"Adds an NFT collection\",\"params\":{\"id\":\"Id of the collection\"}},\"removedNFTCollection(uint256,address)\":{\"details\":\"Removes an NFT collection\",\"params\":{\"id\":\"Id of the collection\"}},\"transferredOwnership(address,address)\":{\"details\":\"Transfers ownership of the contract to another address\",\"params\":{\"from\":\"Address of the previous owner\",\"to\":\"Address of the new owner\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"PriceUpdated(uint256,uint256)\":{\"notice\":\"The price has been updated\"},\"ProposalCreated(uint256,string,address)\":{\"notice\":\"A new proposal was created\"},\"ProposalFinalized(uint256,bool)\":{\"notice\":\"Voting result of the Proposal\"},\"VoteCast(address,uint256,bool)\":{\"notice\":\"A vote has been cast on a proposal\"},\"addedNFTCollection(uint256,address)\":{\"notice\":\"An NFT collection has been added\"},\"removedNFTCollection(uint256,address)\":{\"notice\":\"An NFT collection has been removed\"},\"transferredOwnership(address,address)\":{\"notice\":\"Ownership of Dexhune has been transferred\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/DexhunePriceDAO.sol\":\"DexhunePriceDAO\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/DexhuneBase.sol\":{\"keccak256\":\"0x787845030bdec105b35d758918e69bf4b37dac9086fb8b8538ec9e085a840780\",\"license\":\"BSD-3-Clause\",\"urls\":[\"bzz-raw://d7997e80a720dcb31a750c3d7cf6652452d01b9a23b03fbef05234ec3c4a7ebe\",\"dweb:/ipfs/QmajW3QhELKZNNvpDdbwKiFhBpKvk57PkX97A7r5CCG8Z4\"]},\"project:/contracts/DexhunePriceDAO.sol\":{\"keccak256\":\"0x8e24c2046cdf6b8901170c6a3e6875e7702935117df7b38febe533c4b3f0d87a\",\"license\":\"BSD-3-Clause\",\"urls\":[\"bzz-raw://8905733544571c231046a72211ed6224336ddaf5467e26bf94c71a6a5d696299\",\"dweb:/ipfs/QmfEoWVuJVQKHsE7zUtZ7px8xDVMnQTKzojfT8b9vbeBfq\"]},\"project:/contracts/DexhuneRoot.sol\":{\"keccak256\":\"0xb4cd3668f90db8720925d98dcd4705604a4930c29ec49c5281a6be74a242fd15\",\"license\":\"BSD-3-Clause\",\"urls\":[\"bzz-raw://427c2d9d7b6ee793cfb639ed3f636bbcd6fea88537298b06e1399f3b701af4ca\",\"dweb:/ipfs/QmRQ8ACxfmzVnPFWsPJegKR6SFcUdcZNtNkQfg8HrR3VXY\"]},\"project:/contracts/_StandardInterfaces.sol\":{\"keccak256\":\"0x126a262310481d8a1ef4165170bd839d0bf50517bad6ac8dfcdabf94c7d83c32\",\"license\":\"BSD-3-Clause\",\"urls\":[\"bzz-raw://d9135a40223aa499cb889f963a57ff9bb3eaf12552bd33448cad6c9939edad1d\",\"dweb:/ipfs/QmUorrMfg48SsbZwm4taAmniUTVwrL2cRzUiVpKHPZoM2Z\"]}},\"version\":1}"
        }
      }
   Received response:
      {
        "address": "0x1DB4843765f52d73467142C1b2B655011109ceC8",
        "chainId": "43114",
        "status": null,
        "message": "Chain #43114 does not have a contract deployed at 0x1DB4843765f52d73467142C1b2B655011109ceC8."
      }
   Fail - Unable to verify: Chain #43114 does not have a contract deployed at 0x1DB4843765f52d73467142C1b2B655011109ceC8.
   Failed to verify 1 contract(s): DexhunePriceDAO@0x1DB4843765f52d73467142C1b2B655011109ceC8
