import { BigNumber } from "ethers";
export declare enum Format {
    number = "number",
    commas = "commas",
    short = "short",
    hex = "hex",
    percent = "percent"
}
interface BaseFormatOptions {
    digits?: number;
    removeTrailingZero?: boolean;
    min?: number;
    max?: number;
    sign?: boolean;
    unit?: string;
}
interface FormatShortOptions extends BaseFormatOptions {
    format: Format.short;
    smallValuesWithComas?: boolean;
}
interface FormatHexOptions {
    format: Format.hex;
}
interface FormatComasOptions extends BaseFormatOptions {
    format: Format.commas;
}
interface FormatNumberOptions extends BaseFormatOptions {
    format: Format.number;
}
interface FormatPercentOptions extends BaseFormatOptions {
    format: Format.percent;
}
export declare type FormatOptions = FormatHexOptions | FormatShortOptions | FormatNumberOptions | FormatComasOptions | FormatPercentOptions;
declare global {
    interface String {
        insert(index: number, substr: string, fillWith?: string): string;
    }
}
export declare function formatBN(bn: BigNumber, decimals: number, formatOptions?: FormatOptions): string;
/**
 * returns a string representation of a number, always in a decimal format (avoid the 1.34e-15 format for small numbers)
 * @param number
 */
export declare const safeNumberToString: (number: number) => string;
export declare function formatNumber(number: number, formatOptions?: FormatOptions, precision?: number): string;
export {};
