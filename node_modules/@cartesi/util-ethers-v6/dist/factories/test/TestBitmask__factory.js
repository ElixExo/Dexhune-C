import { __extends } from "tslib";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, Interface, } from "ethers";
var _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_bit",
                type: "uint256",
            },
        ],
        name: "getBit",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_bit",
                type: "uint256",
            },
        ],
        name: "setBit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_bit",
                type: "uint256",
            },
        ],
        name: "unsetBit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b5061024c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063428be8071461004657806383363ef61461005b578063d991aeee1461006e575b600080fd5b6100596100543660046101d4565b610095565b005b6100596100693660046101d4565b61010a565b61008161007c3660046101d4565b610150565b604051901515815260200160405180910390f35b6040516306449da160e41b815260006004820181905260248201839052604482015273__$42c89e72d697364e16223415bf9649dea2$__90636449da10906064015b60006040518083038186803b1580156100ef57600080fd5b505af4158015610103573d6000803e3d6000fd5b5050505050565b6040516306449da160e41b815260006004820152602481018290526001604482015273__$42c89e72d697364e16223415bf9649dea2$__90636449da10906064016100d7565b6040516303fbaf7360e01b8152600060048201819052602482018390529073__$42c89e72d697364e16223415bf9649dea2$__906303fbaf7390604401602060405180830381865af41580156101aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ce91906101ed565b92915050565b6000602082840312156101e657600080fd5b5035919050565b6000602082840312156101ff57600080fd5b8151801515811461020f57600080fd5b939250505056fea264697066735822122085936affc4f8f6b4a2f2e789769acaa2c40693f0a34c7b8e955e093b6bfebc9964736f6c63430008140033";
var isSuperArgs = function (xs) {
    return (typeof xs[0] === "string" ||
        Array.isArray(xs[0]) ||
        "_isInterface" in xs[0]);
};
export var TestBitmask__factory = /** @class */ (function (_super) {
    __extends(TestBitmask__factory, _super);
    function TestBitmask__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            var linkLibraryAddresses = args[0], signer = args[1];
            _this = _super.call(this, _abi, TestBitmask__factory.linkBytecode(linkLibraryAddresses), signer) || this;
        }
        return _this;
    }
    TestBitmask__factory.linkBytecode = function (linkLibraryAddresses) {
        var linkedBytecode = _bytecode;
        linkedBytecode = linkedBytecode.replace(new RegExp("__\\$42c89e72d697364e16223415bf9649dea2\\$__", "g"), linkLibraryAddresses["contracts/Bitmask.sol:Bitmask"]
            .replace(/^0x/, "")
            .toLowerCase());
        return linkedBytecode;
    };
    TestBitmask__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    TestBitmask__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    TestBitmask__factory.prototype.connect = function (runner) {
        return _super.prototype.connect.call(this, runner);
    };
    TestBitmask__factory.createInterface = function () {
        return new Interface(_abi);
    };
    TestBitmask__factory.connect = function (address, runner) {
        return new Contract(address, _abi, runner);
    };
    TestBitmask__factory.bytecode = _bytecode;
    TestBitmask__factory.abi = _abi;
    return TestBitmask__factory;
}(ContractFactory));
