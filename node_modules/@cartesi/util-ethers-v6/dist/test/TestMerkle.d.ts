import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export interface TestMerkleInterface extends Interface {
    getFunction(nameOrSignature: "calculateRootFromPowerOfTwo" | "getEmptyTreeHashAtIndex" | "getHashOfWordAtIndex" | "getMerkleRootFromBytes" | "getRootAfterReplacementInDrive"): FunctionFragment;
    encodeFunctionData(functionFragment: "calculateRootFromPowerOfTwo", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "getEmptyTreeHashAtIndex", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getHashOfWordAtIndex", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMerkleRootFromBytes", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRootAfterReplacementInDrive", values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]): string;
    decodeFunctionResult(functionFragment: "calculateRootFromPowerOfTwo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEmptyTreeHashAtIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getHashOfWordAtIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMerkleRootFromBytes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRootAfterReplacementInDrive", data: BytesLike): Result;
}
export interface TestMerkle extends BaseContract {
    connect(runner?: ContractRunner | null): TestMerkle;
    waitForDeployment(): Promise<this>;
    interface: TestMerkleInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    calculateRootFromPowerOfTwo: TypedContractMethod<[
        hashes: BytesLike[]
    ], [
        string
    ], "view">;
    getEmptyTreeHashAtIndex: TypedContractMethod<[
        _index: BigNumberish
    ], [
        string
    ], "view">;
    getHashOfWordAtIndex: TypedContractMethod<[
        _data: BytesLike,
        _wordIndex: BigNumberish
    ], [
        string
    ], "view">;
    getMerkleRootFromBytes: TypedContractMethod<[
        _data: BytesLike,
        _log2Size: BigNumberish
    ], [
        string
    ], "view">;
    getRootAfterReplacementInDrive: TypedContractMethod<[
        _position: BigNumberish,
        _logSizeOfReplacement: BigNumberish,
        _logSizeOfFullDrive: BigNumberish,
        _replacement: BytesLike,
        siblings: BytesLike[]
    ], [
        string
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "calculateRootFromPowerOfTwo"): TypedContractMethod<[hashes: BytesLike[]], [string], "view">;
    getFunction(nameOrSignature: "getEmptyTreeHashAtIndex"): TypedContractMethod<[_index: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "getHashOfWordAtIndex"): TypedContractMethod<[
        _data: BytesLike,
        _wordIndex: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getMerkleRootFromBytes"): TypedContractMethod<[
        _data: BytesLike,
        _log2Size: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getRootAfterReplacementInDrive"): TypedContractMethod<[
        _position: BigNumberish,
        _logSizeOfReplacement: BigNumberish,
        _logSizeOfFullDrive: BigNumberish,
        _replacement: BytesLike,
        siblings: BytesLike[]
    ], [
        string
    ], "view">;
    filters: {};
}
//# sourceMappingURL=TestMerkle.d.ts.map