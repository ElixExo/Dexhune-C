import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export interface TestCartesiMathInterface extends Interface {
    getFunction(nameOrSignature: "clz" | "ctz" | "getLog2Floor" | "getLog2TableTimes1M" | "isPowerOf2"): FunctionFragment;
    encodeFunctionData(functionFragment: "clz", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "ctz", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getLog2Floor", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getLog2TableTimes1M", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isPowerOf2", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "clz", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ctz", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLog2Floor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLog2TableTimes1M", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPowerOf2", data: BytesLike): Result;
}
export interface TestCartesiMath extends BaseContract {
    connect(runner?: ContractRunner | null): TestCartesiMath;
    waitForDeployment(): Promise<this>;
    interface: TestCartesiMathInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    clz: TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
    ctz: TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
    getLog2Floor: TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
    getLog2TableTimes1M: TypedContractMethod<[
        _num: BigNumberish
    ], [
        bigint
    ], "view">;
    isPowerOf2: TypedContractMethod<[_num: BigNumberish], [boolean], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "clz"): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "ctz"): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getLog2Floor"): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getLog2TableTimes1M"): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "isPowerOf2"): TypedContractMethod<[_num: BigNumberish], [boolean], "view">;
    filters: {};
}
//# sourceMappingURL=TestCartesiMath.d.ts.map