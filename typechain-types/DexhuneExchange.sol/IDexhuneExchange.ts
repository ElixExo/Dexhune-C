/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IDexhuneExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimUnallocated"
      | "clearOrders"
      | "deposit"
      | "getBalance"
      | "listToken"
      | "makeOrder"
      | "queryBalance"
      | "queryListing"
      | "queryOrder"
      | "queryPrice"
      | "settleOrders"
      | "takeOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimUnallocated",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "clearOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOrder",
    values: [AddressLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "queryBalance",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "queryListing",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryOrder",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleOrders",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "takeOrder",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimUnallocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeOrder", data: BytesLike): Result;
}

export interface IDexhuneExchange extends BaseContract {
  connect(runner?: ContractRunner | null): IDexhuneExchange;
  waitForDeployment(): Promise<this>;

  interface: IDexhuneExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimUnallocated: TypedContractMethod<
    [tokenAddr: AddressLike, isAVAX: boolean],
    [void],
    "nonpayable"
  >;

  clearOrders: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<
    [
      fromAddress: AddressLike,
      tokenAddr: AddressLike,
      balanceType: boolean,
      amount: string
    ],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  listToken: TypedContractMethod<
    [
      tokenContract: AddressLike,
      rewardAmount: BigNumberish,
      rewardThreshold: BigNumberish,
      parityAddr: AddressLike,
      price: string
    ],
    [void],
    "nonpayable"
  >;

  makeOrder: TypedContractMethod<
    [tokenAddr: AddressLike, amount: string, orderType: boolean],
    [void],
    "nonpayable"
  >;

  queryBalance: TypedContractMethod<
    [contractAddr: AddressLike, balanceType: boolean],
    [void],
    "view"
  >;

  queryListing: TypedContractMethod<
    [queryType: BigNumberish, queryDetails: string],
    [void],
    "nonpayable"
  >;

  queryOrder: TypedContractMethod<
    [queryType: BigNumberish, queryDetails: string],
    [void],
    "nonpayable"
  >;

  queryPrice: TypedContractMethod<[], [bigint], "nonpayable">;

  settleOrders: TypedContractMethod<
    [tokenAddr: AddressLike, orderType: boolean],
    [void],
    "nonpayable"
  >;

  takeOrder: TypedContractMethod<
    [tokenAddr: AddressLike, amount: string],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimUnallocated"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, isAVAX: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clearOrders"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      fromAddress: AddressLike,
      tokenAddr: AddressLike,
      balanceType: boolean,
      amount: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listToken"
  ): TypedContractMethod<
    [
      tokenContract: AddressLike,
      rewardAmount: BigNumberish,
      rewardThreshold: BigNumberish,
      parityAddr: AddressLike,
      price: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "makeOrder"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, amount: string, orderType: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queryBalance"
  ): TypedContractMethod<
    [contractAddr: AddressLike, balanceType: boolean],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryListing"
  ): TypedContractMethod<
    [queryType: BigNumberish, queryDetails: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queryOrder"
  ): TypedContractMethod<
    [queryType: BigNumberish, queryDetails: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queryPrice"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "settleOrders"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, orderType: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "takeOrder"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, amount: string],
    [void],
    "view"
  >;

  filters: {};
}
