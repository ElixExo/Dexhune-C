/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DexhuneExchangeBase,
  DexhuneExchangeBaseInterface,
} from "../../exchange/DexhuneExchangeBase";

const _abi = [
  {
    inputs: [],
    name: "DepositFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedStringToNumberConversion",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "listingPrice",
        type: "uint256",
      },
    ],
    name: "InsufficientBalanceForListing",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenContract",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwnerMustSetDefaultToken",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderLimitReachedTryLater",
    type: "error",
  },
  {
    inputs: [],
    name: "ParityShouldNotHavePrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddr",
        type: "address",
      },
    ],
    name: "TokenAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenLimitReached",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotListed",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotSupported_TooManyDecimals",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "UnauthorizedAccount",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220e8e1047b0f159ffafc33774379fba3d074ccf5379c2d74a9ab4d13b1344f7a6664736f6c63430008150033";

type DexhuneExchangeBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexhuneExchangeBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DexhuneExchangeBase__factory extends ContractFactory {
  constructor(...args: DexhuneExchangeBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DexhuneExchangeBase & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): DexhuneExchangeBase__factory {
    return super.connect(runner) as DexhuneExchangeBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexhuneExchangeBaseInterface {
    return new Interface(_abi) as DexhuneExchangeBaseInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DexhuneExchangeBase {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as DexhuneExchangeBase;
  }
}
