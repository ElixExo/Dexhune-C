/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDexhuneExchange,
  IDexhuneExchangeInterface,
} from "../../DexhuneExchange.sol/IDexhuneExchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isAVAX",
        type: "bool",
      },
    ],
    name: "claimUnallocated",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "clearOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "balanceType",
        type: "bool",
      },
      {
        internalType: "string",
        name: "amount",
        type: "string",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardThreshold",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "parityAddr",
        type: "address",
      },
      {
        internalType: "string",
        name: "price",
        type: "string",
      },
    ],
    name: "listToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
      {
        internalType: "string",
        name: "amount",
        type: "string",
      },
      {
        internalType: "bool",
        name: "orderType",
        type: "bool",
      },
    ],
    name: "makeOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "balanceType",
        type: "bool",
      },
    ],
    name: "queryBalance",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "queryType",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "queryDetails",
        type: "string",
      },
    ],
    name: "queryListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "queryType",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "queryDetails",
        type: "string",
      },
    ],
    name: "queryOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "queryPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "orderType",
        type: "bool",
      },
    ],
    name: "settleOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
      {
        internalType: "string",
        name: "amount",
        type: "string",
      },
    ],
    name: "takeOrder",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IDexhuneExchange__factory {
  static readonly abi = _abi;
  static createInterface(): IDexhuneExchangeInterface {
    return new Interface(_abi) as IDexhuneExchangeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDexhuneExchange {
    return new Contract(address, _abi, runner) as unknown as IDexhuneExchange;
  }
}
