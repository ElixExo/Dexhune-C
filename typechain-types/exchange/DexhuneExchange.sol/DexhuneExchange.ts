/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DexhuneExchangeBase {
  export type TokenDataModelStruct = {
    tokenNo: BigNumberish;
    name: string;
    sym: string;
    addr: AddressLike;
    parityAddr: AddressLike;
    reward: BigNumberish;
    rewardThreshold: BigNumberish;
    scheme: BigNumberish;
    price: BigNumberish;
    orders: BigNumberish;
  };

  export type TokenDataModelStructOutput = [
    tokenNo: bigint,
    name: string,
    sym: string,
    addr: string,
    parityAddr: string,
    reward: bigint,
    rewardThreshold: bigint,
    scheme: bigint,
    price: bigint,
    orders: bigint
  ] & {
    tokenNo: bigint;
    name: string;
    sym: string;
    addr: string;
    parityAddr: string;
    reward: bigint;
    rewardThreshold: bigint;
    scheme: bigint;
    price: bigint;
    orders: bigint;
  };
}

export interface DexhuneExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createBuyOrder"
      | "createSellOrder"
      | "deposit"
      | "depositToken"
      | "getBalance"
      | "listToken"
      | "queryBalance"
      | "settleOrders"
      | "viewToken(address)"
      | "viewToken(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createBuyOrder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryBalance",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOrders",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "viewToken(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewToken(uint256)",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewToken(uint256)",
    data: BytesLike
  ): Result;
}

export interface DexhuneExchange extends BaseContract {
  connect(runner?: ContractRunner | null): DexhuneExchange;
  waitForDeployment(): Promise<this>;

  interface: DexhuneExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createBuyOrder: TypedContractMethod<
    [tokenAddr: AddressLike],
    [void],
    "payable"
  >;

  createSellOrder: TypedContractMethod<
    [tokenAddr: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[tokenAddr: AddressLike], [void], "payable">;

  depositToken: TypedContractMethod<
    [tokenAddr: AddressLike, fromAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  listToken: TypedContractMethod<
    [
      tokenAddr: AddressLike,
      scheme: BigNumberish,
      reward: BigNumberish,
      rewardThreshold: BigNumberish,
      parityAddr: AddressLike,
      price: string
    ],
    [void],
    "nonpayable"
  >;

  queryBalance: TypedContractMethod<
    [tokenAddr: AddressLike, isAVAX: boolean],
    [bigint],
    "view"
  >;

  settleOrders: TypedContractMethod<
    [tokenAddr: AddressLike, orderType: boolean],
    [void],
    "nonpayable"
  >;

  "viewToken(address)": TypedContractMethod<
    [tokenAddr: AddressLike],
    [DexhuneExchangeBase.TokenDataModelStructOutput],
    "view"
  >;

  "viewToken(uint256)": TypedContractMethod<
    [tokenNo: BigNumberish],
    [DexhuneExchangeBase.TokenDataModelStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createBuyOrder"
  ): TypedContractMethod<[tokenAddr: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "createSellOrder"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[tokenAddr: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, fromAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listToken"
  ): TypedContractMethod<
    [
      tokenAddr: AddressLike,
      scheme: BigNumberish,
      reward: BigNumberish,
      rewardThreshold: BigNumberish,
      parityAddr: AddressLike,
      price: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queryBalance"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, isAVAX: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "settleOrders"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, orderType: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "viewToken(address)"
  ): TypedContractMethod<
    [tokenAddr: AddressLike],
    [DexhuneExchangeBase.TokenDataModelStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewToken(uint256)"
  ): TypedContractMethod<
    [tokenNo: BigNumberish],
    [DexhuneExchangeBase.TokenDataModelStructOutput],
    "view"
  >;

  filters: {};
}
