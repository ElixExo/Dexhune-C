/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "DexhuneERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneERC20__factory>;
    getContractFactory(
      name: "DexhuneERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneERC20Base__factory>;
    getContractFactory(
      name: "DexhunePriceDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhunePriceDAO__factory>;
    getContractFactory(
      name: "IERC721Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Proxy__factory>;
    getContractFactory(
      name: "DexhuneConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneConfig__factory>;
    getContractFactory(
      name: "DexhuneRoot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneRoot__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MockNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockNFT__factory>;

    getContractAt(
      name: "DexhuneERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexhuneERC20>;
    getContractAt(
      name: "DexhuneERC20Base",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexhuneERC20Base>;
    getContractAt(
      name: "DexhunePriceDAO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexhunePriceDAO>;
    getContractAt(
      name: "IERC721Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Proxy>;
    getContractAt(
      name: "DexhuneConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexhuneConfig>;
    getContractAt(
      name: "DexhuneRoot",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexhuneRoot>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MockNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockNFT>;

    deployContract(
      name: "DexhuneERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneERC20>;
    deployContract(
      name: "DexhuneERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneERC20Base>;
    deployContract(
      name: "DexhunePriceDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhunePriceDAO>;
    deployContract(
      name: "IERC721Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Proxy>;
    deployContract(
      name: "DexhuneConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneConfig>;
    deployContract(
      name: "DexhuneRoot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneRoot>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockNFT>;

    deployContract(
      name: "DexhuneERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneERC20>;
    deployContract(
      name: "DexhuneERC20Base",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneERC20Base>;
    deployContract(
      name: "DexhunePriceDAO",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhunePriceDAO>;
    deployContract(
      name: "IERC721Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Proxy>;
    deployContract(
      name: "DexhuneConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneConfig>;
    deployContract(
      name: "DexhuneRoot",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexhuneRoot>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockNFT>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
  }
}
