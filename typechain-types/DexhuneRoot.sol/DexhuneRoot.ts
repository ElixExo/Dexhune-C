/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DexhuneRootInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NFTCollections"
      | "PriceProposals"
      | "addNFTCollection"
      | "cooldownTimeout"
      | "owner"
      | "removeNFTCollection"
      | "setCooldownTimeout"
      | "setTransferTimeout"
      | "transferCooldown"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "addedNFTCollection"
      | "removedNFTCollection"
      | "transferredOwnership"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "NFTCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "PriceProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addNFTCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeNFTCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferTimeout",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "NFTCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PriceProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNFTCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNFTCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace addedNFTCollectionEvent {
  export type InputTuple = [id: BigNumberish, collectionAddress: AddressLike];
  export type OutputTuple = [id: bigint, collectionAddress: string];
  export interface OutputObject {
    id: bigint;
    collectionAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace removedNFTCollectionEvent {
  export type InputTuple = [id: BigNumberish, collectionAddress: AddressLike];
  export type OutputTuple = [id: bigint, collectionAddress: string];
  export interface OutputObject {
    id: bigint;
    collectionAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace transferredOwnershipEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DexhuneRoot extends BaseContract {
  connect(runner?: ContractRunner | null): DexhuneRoot;
  waitForDeployment(): Promise<this>;

  interface: DexhuneRootInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NFTCollections: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  PriceProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        description: string;
        value: string;
        votesUp: bigint;
        votesDown: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;

  addNFTCollection: TypedContractMethod<
    [_contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  cooldownTimeout: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeNFTCollection: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCooldownTimeout: TypedContractMethod<
    [_timeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransferTimeout: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  transferCooldown: TypedContractMethod<[], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NFTCollections"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "PriceProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        description: string;
        value: string;
        votesUp: bigint;
        votesDown: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addNFTCollection"
  ): TypedContractMethod<[_contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cooldownTimeout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeNFTCollection"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCooldownTimeout"
  ): TypedContractMethod<[_timeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferTimeout"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferCooldown"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "addedNFTCollection"
  ): TypedContractEvent<
    addedNFTCollectionEvent.InputTuple,
    addedNFTCollectionEvent.OutputTuple,
    addedNFTCollectionEvent.OutputObject
  >;
  getEvent(
    key: "removedNFTCollection"
  ): TypedContractEvent<
    removedNFTCollectionEvent.InputTuple,
    removedNFTCollectionEvent.OutputTuple,
    removedNFTCollectionEvent.OutputObject
  >;
  getEvent(
    key: "transferredOwnership"
  ): TypedContractEvent<
    transferredOwnershipEvent.InputTuple,
    transferredOwnershipEvent.OutputTuple,
    transferredOwnershipEvent.OutputObject
  >;

  filters: {
    "addedNFTCollection(uint256,address)": TypedContractEvent<
      addedNFTCollectionEvent.InputTuple,
      addedNFTCollectionEvent.OutputTuple,
      addedNFTCollectionEvent.OutputObject
    >;
    addedNFTCollection: TypedContractEvent<
      addedNFTCollectionEvent.InputTuple,
      addedNFTCollectionEvent.OutputTuple,
      addedNFTCollectionEvent.OutputObject
    >;

    "removedNFTCollection(uint256,address)": TypedContractEvent<
      removedNFTCollectionEvent.InputTuple,
      removedNFTCollectionEvent.OutputTuple,
      removedNFTCollectionEvent.OutputObject
    >;
    removedNFTCollection: TypedContractEvent<
      removedNFTCollectionEvent.InputTuple,
      removedNFTCollectionEvent.OutputTuple,
      removedNFTCollectionEvent.OutputObject
    >;

    "transferredOwnership(address,address)": TypedContractEvent<
      transferredOwnershipEvent.InputTuple,
      transferredOwnershipEvent.OutputTuple,
      transferredOwnershipEvent.OutputObject
    >;
    transferredOwnership: TypedContractEvent<
      transferredOwnershipEvent.InputTuple,
      transferredOwnershipEvent.OutputTuple,
      transferredOwnershipEvent.OutputObject
    >;
  };
}
